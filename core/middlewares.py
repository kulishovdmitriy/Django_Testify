import copy
from urllib.parse import urlencode
from django.urls import reverse
from django.shortcuts import render

from accounts.models import BlockedUser


class QueryParamsInjectorMiddleware:
    """
        Middleware to inject modified query parameters into the request.

        class QueryParamsInjectorMiddleware:

            def __init__(self, get_response):
                Initializes the middleware with the given response handler.

                Parameters:
                get_response (callable): The next middleware in the stack or the final view handler.

            def __call__(self, request):
                Processes the incoming request, modifies query parameters, and passes the request on.

                Parameters:
                request (HttpRequest): The HTTP request object.

                Returns:
                HttpResponse: The HTTP response object generated by the next middleware or view.
    """

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):

        query_params = copy.deepcopy(request.GET)
        if 'page' in query_params:
            del query_params['page']

        request.query_params = urlencode(query_params)

        response = self.get_response(request)

        return response


class BlockedUserMiddleware:
    """
    BlockedUserMiddleware class intercepts HTTP requests and checks if the user is blocked.

    If the user is authenticated and found in the BlockedUser table, the middleware will:
    - Allow access to the 'contact_us' page.
    - Redirect to 'blocked_user.html' for all other pages.

    Methods:
        __init__(self, get_response):
            Initializes the middleware with the response callback.

        __call__(self, request):
            Processes the incoming request and applies blocking logic.
    """

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):

        if request.user.is_authenticated and BlockedUser.objects.filter(user=request.user).exists():

            if request.path == reverse('accounts:contact_us'):

                response = self.get_response(request)
                return response
            else:
                return render(request, 'blocked_user.html')

        response = self.get_response(request)
        return response
